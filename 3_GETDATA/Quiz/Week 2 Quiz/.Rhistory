makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv<- function(invm = matrix()) inv <<- invm
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
> inv <- cacheSolve(x)
getting cached data
> inv
inv <- cacheSolve(x)
inv <- cacheSolve(x)
inv
}
makeCacheMatrix <- function(x = matrix()) {
# inverse set to NULL by default
i <- NULL
# function to set x
set <- function(y){
x <<- y
i <<- NULL
}
# function to get x
get <- function() x
# function to set inverse
setinverse <- function(inverse = matrix()) i <<- inverse
# function to get inverse
getinverse <- function() i
# return a list
list(set=set, get=get,setinverse=setinverse, getinverse=getinverse)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting chcaed inverse")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
## If not found the inverse in the cache, then computes it and save in the cache
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set,
get=get,
getinv=getinv,
setinv=setinv)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set,
get=get,
getinv=getinv,
setinv=setinv)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinv(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
mv ~/.rstudio-desktop ~/rstudio-desktop.old
install.packages("httr")
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
toJSON(json1)
?toJSON()
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages("jquery")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
json2[1, 1]
json2[1, ]
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, ]
summary(json2)
dim(json2)
str(json2)
str(json2)
json2$created_at
json2$created_at[1]
colnames(json2)
json2$created_at
order(json2$created_at)
temp <- as.data.frame(json2$created_at)
View(temp)
?as.data.frame()
temp <- json2$created_at
temp <- as.data.frame(json2$created_at, byrow=T)
View(temp)
temp <- as.data.frame(json2$created_at, byrow=F)
View(temp)
temp <- lapply(json2, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
temp <- as.data.frame(temp)
temp <- as.data.frame(temp$created_at)
View(temp)
order(temp)
temp <- lapply(json2, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
temp.order <- temp[order(temp$created_at),]
temp.order <- temp$created_at[order(temp$created_at),]
temp.created <- temp$created_at
temp.created <- as.data.frame(temp$created_at)
View(temp.created)
temp.order <- temp.created[order(temp$created_at),]
temp.order
temp.order <- as.data.frame(temp.created[order(temp$created_at),])
temp.order
temp.order[1]
temp.order[1,1]
temp.order[1,1]
colnames(json2)
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
temp <- lapply(json2, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
created <- as.data.frame(temp$created_at)
created.order <- as.data.frame(temp.created[order(temp$created_at),])
created.order[1,1]
created <- as.data.frame(temp$created_at)
View(created)
created.order <- as.data.frame(temp.created[order(temp$created_at),])
created.order <- as.data.frame(created[order(temp$created_at),])
created.order[1,1]
pushed <- as.data.frame(temp$pushed_at)
pushed.order <- as.data.frame(pushed[order(temp$pushed_at),])
pushed.order[1,1]
created.order[1,1]
pushed.order[,1]
created.order[,1]
install.packages("sqldf")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(gsubfn, RSQLite, DBI)
library(gsubfn, RSQLite)
library("RSQLite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:DBI", unload=TRUE)
library("DBI", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:RSQLite", unload=TRUE)
library("RSQLite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd("~/github/Datas_codes/3_GETDATA/Quiz/Week 2 Quiz")
dtr()
dir()
acs <- read.csv("getdata_data_ss06pid.csv")
View(acs)
colnames(acs)
temp <- acs$pwgtp1
head(temp)
rm temp
rm "temp"
rm(temp)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50")
unique(acs$AGEP)
?unique()
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
library(XML)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes=T)
library(httr)
html2 <- GET(url)
html2 <- GET(url)
summary(html2)
nchar(html2[10])
nchar(html2[10, ])
html2[10,]
html2[10]
content2 <- content(html2, as="text")
parsedHtml = htmlParse(content2, asText=T)
parsedHtml
parsedHtml[10]
nchar(parsedHtml[10, ])
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmValue)
xpathSApply(html, "//title", xmlValue)
html[1]
html[1:1]
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readline(con)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readlines(con)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
nchar(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100])
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?read.fwf(0)
data <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
header = T, skip = 2)
data <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
header = T, skip = 2,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
dir()
data <- read.fwf(
file= "getdata_wksst8110.for",
header = T, skip = 2,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
df <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
View(df)
df <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4, header = T)
data <- read.fwf(
file= "getdata_wksst8110.for",
skip = 2,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
View(data)
View(df)
View(df)
View(data)
data <- read.fwf(
file = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip = 4,
widths = c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
View(data)
data[4,9]
View(data)
?sum()
sum(data[4, ])
data[4,]
data[4,2:9]
sum(data[4,2:9])
sum(data[, 4])
data <- read.fwf(
file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 4,
widths = c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
dir()
data <- read.fwf(
file = "getdata_wksst8110.for",
skip = 4,
widths = c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
View(data)
sum(data[, 4])
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
temp <- lapply(json2, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
created <- as.data.frame(temp$created_at)
created.order <- as.data.frame(created[order(temp$created_at),])
created.order[,1]
oauth_endpoints("github")
myapp <- oauth_app("github",
key="d8139d232a03e3863b6e",
secret = "cbf8491608ec4b965d719de33f537eb70c465116")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
temp <- lapply(json2, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
created <- as.data.frame(temp$created_at)
View(created)
View(json2)
View(created)
View(json2)
View(created)
temp$created_at[name == "datasharing",]
temp$created_at[temp$name == "datasharing",]
temp$created_at[temp$name == "datasharing"]
temp$created_at[temp$name == "datasharing"]
