dtSubjectTest <- fread(file.path(filePath,"test","subject_test.txt")) # File containing subject identifiers
dtDataTest <- data.table(read.table(file.path(filePath,"test","X_test.txt"))) # File containing feature vectors
dtActivityTest <- fread(file.path(filePath,"test","Y_test.txt")) # File containg activity information
# Merge files using rbind and cbind
dtSubject <- rbind(dtSubjectTrain,dtSubjectTest) # Concatenates the files with subject information
setnames(dtSubject,"V1","subject") # Adds name to subject variable column
dtActivity <- rbind(dtActivityTrain,dtActivityTest) # Concatenates the files with activity information
setnames(dtActivity,"V1","activityNum") # Adds name to activity variable column
dtData <- rbind(dtDataTrain,dtDataTest) # Concatenates the files with the feature vectors
dtSubjectActivity <- cbind(dtSubject,dtActivity) # Merges the columns of the subject and activity tables
dtComplete <- cbind(dtSubjectActivity,dtData) # Merges the columns of the feature vectors and subject/activity table
# Set key for data table
setkey(dtComplete,subject,activityNum)
# Read in features.txt file to sort out mean and standard deviation results in feature vectors
dtFeatures <- fread(file.path(filePath,"features.txt"))  # Reads in features description file
setnames(dtFeatures, c("featureNum","featureName")) # Add column names to features table
dtFeatures <- dtFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)] # Sort out measurements of mean and standard deviation
dtFeatures$featureCode <- dtFeatures[,paste0("V",featureNum)] # Add V to featureNum to match column names in merged table
featuresSelect <- c(key(dtComplete),dtFeatures$featureCode) # Create vector of column names to select
dtComplete <- dtComplete[,featuresSelect,with = FALSE] # Subset data table to select only desired columns
# Swap out activity numbers with descriptive names
dtActivityNames <- fread(file.path(filePath,"activity_labels.txt")) # read in file with activity names
setnames(dtActivityNames,names(dtActivityNames),c("activityNum","activity")) # Add column names to activity file
dtComplete <- merge(dtComplete, dtActivityNames, by="activityNum", all.x = TRUE) # Change the activity numbers to names
setcolorder(dtComplete,c("subject","activity","V1","V2","V3","V4","V5","V6",
"V41","V42","V43","V44","V45","V46","V81","V82","V83",
"V84","V85","V86","V121","V122","V123","V124","V125",
"V126","V161","V162","V163","V164","V165","V166",
"V201","V202","V214","V215","V227","V228","V240",
"V241","V253","V254","V266","V267","V268","V269",
"V270","V271","V345","V346","V347","V348","V349",
"V350","V424","V425","V426","V427","V428","V429",
"V503","V504","V516","V517","V529","V530","V542","V543","activityNum")) # Reorders columns
dtComplete[,activityNum:=NULL] # Remove acitivityNum column from table
# Swap out feature designators with descriptive names
columnNames <- as.vector(dtFeatures$featureName) # Create character vector from column of feature names
columnNames <- paste0("mean-",columnNames) # prepend the string "mean-" to every entry in the character vector
setnames(dtComplete,names(dtComplete),c("subject","activity",columnNames)) # Write the column names to the table
# Calculate mean of each feature by subject and activity
dtTidyData <- as.data.table(ddply(dtComplete, .(subject,activity), colwise(mean))) # Create tidy data table
# Write tidy data set to txt file in working directory
write.table(dtTidyData, file = "TidyData.txt", row.name = FALSE)
setwd("~/github/Datas_codes/3_GETDATA/Coursera/UCI_HAR_Dataset")
# merge training and test data
s1 <- read.table("test/subject_test.txt", header=F)
x1 <- read.table("test/x_test.txt", header=F)
y1 <- read.table("test/y_test.txt", header=F)
s2 <- read.table("train/subject_train.txt", header=F)
x2 <- read.table("train/x_train.txt", header=F)
y2 <- read.table("train/y_train.txt", header=F)
s <- rbind(s1, s2)
x <- rbind(x1, x2)
y <- rbind(y1, y2)
# read features and select only mean and sd of measurement
fea <- read.table("features.txt", header=F)
fea_id <- grep("mean\\(\\)|std\\(\\)", fea[,2], ignore.case = TRUE)
# add descriptive variable names for measurements
names(x) <- fea[,2]
# read activity labels and merge it with measurement set
labels <- read.table("activity_labels.txt", header=F)
y_l <- merge(y, labels, by.x=names(y)[1], by.y=names(labels)[1])
# generate tidy data
tdata <- cbind(s,y_l[,2],x[,fea_id])
# add descriptive variable names (features already have descriptive names)
names(tdata)[1:2] <- c("Subject","Activity")
# create second data set with the average of each variable for each activity and each subject
library(plyr)
tdata_mean <- ddply(tdata, .(Subject, Activity), summarize,
mean(tdata[,3]),
mean(tdata[,4]),
mean(tdata[,5]),
mean(tdata[,6]),
mean(tdata[,7]),
mean(tdata[,8]),
mean(tdata[,9]),
mean(tdata[,10]),
mean(tdata[,11]),
mean(tdata[,12]),
mean(tdata[,13]),
mean(tdata[,14]),
mean(tdata[,15]),
mean(tdata[,16]),
mean(tdata[,17]),
mean(tdata[,18]),
mean(tdata[,19]),
mean(tdata[,20]),
mean(tdata[,21]),
mean(tdata[,22]),
mean(tdata[,23]),
mean(tdata[,24]),
mean(tdata[,25]),
mean(tdata[,26]),
mean(tdata[,27]),
mean(tdata[,28]),
mean(tdata[,29]),
mean(tdata[,30]),
mean(tdata[,31]),
mean(tdata[,32]),
mean(tdata[,33]),
mean(tdata[,34]),
mean(tdata[,35]),
mean(tdata[,36]),
mean(tdata[,37]),
mean(tdata[,38]),
mean(tdata[,39]),
mean(tdata[,40]),
mean(tdata[,41]),
mean(tdata[,42]),
mean(tdata[,43]),
mean(tdata[,44]),
mean(tdata[,45]),
mean(tdata[,46]),
mean(tdata[,47]),
mean(tdata[,48]),
mean(tdata[,49]),
mean(tdata[,50]),
mean(tdata[,51]),
mean(tdata[,52]),
mean(tdata[,53]),
mean(tdata[,54]),
mean(tdata[,55]),
mean(tdata[,56]),
mean(tdata[,57]),
mean(tdata[,58]),
mean(tdata[,59]),
mean(tdata[,60]),
mean(tdata[,61]),
mean(tdata[,62]),
mean(tdata[,63]),
mean(tdata[,64]),
mean(tdata[,65]),
mean(tdata[,66]),
mean(tdata[,67]),
mean(tdata[,68]))
names(tdata_avg) <- names(tdata)
# write data
write.table(tdata_mean, "tdata.txt", row.names=F, col.names=F)
# merge training and test data
s1 <- read.table("test/subject_test.txt", header=F)
x1 <- read.table("test/x_test.txt", header=F)
y1 <- read.table("test/y_test.txt", header=F)
s2 <- read.table("train/subject_train.txt", header=F)
x2 <- read.table("train/x_train.txt", header=F)
y2 <- read.table("train/y_train.txt", header=F)
s <- rbind(s1, s2)
x <- rbind(x1, x2)
y <- rbind(y1, y2)
# read features and select only mean and sd of measurement
fea <- read.table("features.txt", header=F)
fea_id <- grep("mean\\(\\)|std\\(\\)", fea[,2], ignore.case = TRUE)
# add descriptive variable names for measurements
names(x) <- fea[,2]
# read activity labels and merge it with measurement set
labels <- read.table("activity_labels.txt", header=F)
y_l <- merge(y, labels, by.x=names(y)[1], by.y=names(labels)[1])
# generate tidy data
tdata <- cbind(s,y_l[,2],x[,fea_id])
# add descriptive variable names (features already have descriptive names)
names(tdata)[1:2] <- c("Subject","Activity")
# create second data set with the average of each variable for each activity and each subject
library(plyr)
tdata_mean <- ddply(tdata, .(Subject, Activity), summarize,
mean(tdata[,3]),
mean(tdata[,4]),
mean(tdata[,5]),
mean(tdata[,6]),
mean(tdata[,7]),
mean(tdata[,8]),
mean(tdata[,9]),
mean(tdata[,10]),
mean(tdata[,11]),
mean(tdata[,12]),
mean(tdata[,13]),
mean(tdata[,14]),
mean(tdata[,15]),
mean(tdata[,16]),
mean(tdata[,17]),
mean(tdata[,18]),
mean(tdata[,19]),
mean(tdata[,20]),
mean(tdata[,21]),
mean(tdata[,22]),
mean(tdata[,23]),
mean(tdata[,24]),
mean(tdata[,25]),
mean(tdata[,26]),
mean(tdata[,27]),
mean(tdata[,28]),
mean(tdata[,29]),
mean(tdata[,30]),
mean(tdata[,31]),
mean(tdata[,32]),
mean(tdata[,33]),
mean(tdata[,34]),
mean(tdata[,35]),
mean(tdata[,36]),
mean(tdata[,37]),
mean(tdata[,38]),
mean(tdata[,39]),
mean(tdata[,40]),
mean(tdata[,41]),
mean(tdata[,42]),
mean(tdata[,43]),
mean(tdata[,44]),
mean(tdata[,45]),
mean(tdata[,46]),
mean(tdata[,47]),
mean(tdata[,48]),
mean(tdata[,49]),
mean(tdata[,50]),
mean(tdata[,51]),
mean(tdata[,52]),
mean(tdata[,53]),
mean(tdata[,54]),
mean(tdata[,55]),
mean(tdata[,56]),
mean(tdata[,57]),
mean(tdata[,58]),
mean(tdata[,59]),
mean(tdata[,60]),
mean(tdata[,61]),
mean(tdata[,62]),
mean(tdata[,63]),
mean(tdata[,64]),
mean(tdata[,65]),
mean(tdata[,66]),
mean(tdata[,67]),
mean(tdata[,68]))
names(tdata_mean) <- names(tdata)
# write data
write.table(tdata_mean, "tdata.txt", row.names=F, col.names=F)
View(tdata_mean)
paste("Josen", "Zhong")
setwd("~/github/Datas_codes/3_GETDATA/Quiz/Week 4 Quiz/Q1")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "~/microdata", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "~/microdata.csv", method = "curl")
microdata <- read.csv("microdata.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "~/microdata.csv", method = "curl")
microdata <- read.csv("microdata.csv")
microdata <- read.csv("microdata.csv")
View(microdata)
?strsplit()
strsplit(wgtp)
strsplit("wgtp")
tolower(names(microdata))
View(microdata)
splitname = strsplit(names(microdata), "wgtp")
splitname[[123]]
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./GDP.csv", method = "curl")
gdp <- read.csv("GDP.csv")
View(gdp)
gdp <- read.csv("GDP.csv", skip = 4)
View(gdp)
gdp <- read.csv("GDP.csv")
View(gdp)
help(read.csv)
gdp <- read.csv("GDP.csv", skip = 4, colClasses=c(NA,NA,"NULL",NA,NA,"NULL","NULL","NULL","NULL","NULL")))
gdp <- read.csv("GDP.csv", skip = 4, colClasses=c(NA,NA,"NULL",NA,NA,"NULL","NULL","NULL","NULL","NULL"))
colnames(gdp) = c("ID", "Ranking", "Economy", "M-USD")
View(gdp)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./GDP.csv", method = "curl")
gdp <- read.csv("GDP.csv", skip = 4, nrow = 231,
colClasses=c(NA,NA,"NULL",NA,NA,"NULL","NULL","NULL","NULL","NULL"))
colnames(gdp) = c("ID", "Ranking", "Economy", "M-USD")
View(gdp)
setwd("~/github/Datas_codes/3_GETDATA/Quiz/Week 4 Quiz/Q2")
gdp <- read.csv("GDP.csv", skip = 4, nrow = 190,
colClasses=c(NA,NA,"NULL",NA,NA,"NULL","NULL","NULL","NULL","NULL"))
colnames(gdp) = c("ID", "Ranking", "Economy", "M-USD")
View(gdp)
colnames(gdp) = c("ID", "Ranking", "Economy", "USDM")
View(gdp)
gsub(",", "", gdp$USDM)
View(gdp)
USDM.fixed <- gsub(",", "", gdp$USDM)
mean(USDM.fixed)
mean(as.numeric(USDM.fixed))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./GDP.csv", method = "curl")
gdp <- read.csv("GDP.csv", skip = 4, nrow = 190,
colClasses=c(NA,NA,"NULL",NA,NA,"NULL","NULL","NULL","NULL","NULL"))
colnames(gdp) = c("ID", "Ranking", "Economy", "USDM")
View(gdp)
colnames(gdp) = c("ID", "Ranking", "countryNames", "USDM")
View(gdp)
grep("^United",countryNames), 3
Economy
colnames(gdp) = c("ID", "Ranking", "Economy", "USDM")
View(gdp)
countryNames <- gdp$Economy
grep("^United",countryNames)
grep("^United",countryNames), 3
grep("^United",countryNames)
setwd("~/github/Datas_codes/3_GETDATA/Quiz/Week 4 Quiz/Q4")
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, "./GDP.csv", method = "curl")
download.file(fileUrl2, "./EDU.csv", method = "curl")
gdp <- read.csv("GDP.csv")
edu <- read.csv("EDU.csv")
View(edu)
View(gdp)
gdp <- read.csv("GDP.csv", skip = 4, nrow = 190,
colClasses=c(NA,NA,"NULL",NA,NA,"NULL","NULL","NULL","NULL","NULL"))
colnames(gdp) = c("ID", "Ranking", "Economy", "USDM")
edu <- read.csv("EDU.csv")
View(edu)
View(gdp)
colnames(edu)
edu.filt <- edu(grepl("^Fiscal year end: [Jj]une", edu$Special.Notes))
edu.filt <- edu[grepl("^Fiscal year end: [Jj]une", edu$Special.Notes),]
View(edu.filt)
nrow(edu.filt)
mergeData <- merge(gdp, edu, by.x = "ID", by.y = "CountryCode")
View(mergeData)
mergeData.filt <- mergeData[grepl("^Fiscal year end: [Jj]une", mergeData$Special.Notes),]
nrow(mergeData.filt)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
colnames(amzn$row.names) = "Date"
colnames(amzn$row.names) = c("Date")
colnames(amzn) = c("Date", "AMZN.Open", "AMZN.High", "AMZN.Close", "AMZN.Volume", "AMZN.Adjusted")
View(amzn)
View(amzn)
colnames(amzn) <- c("Date", "AMZN.Open", "AMZN.High", "AMZN.Close", "AMZN.Volume", "AMZN.Adjusted")
View(amzn)
amzn$row.names
str(amzn)
amzn <- as.data.frame(amzn)
View(amzn)
colnames(amzn) <- c("Date", "AMZN.Open", "AMZN.High", "AMZN.Close", "AMZN.Volume", "AMZN.Adjusted")
View(amzn)
colnames(amzn) = c("Date", "AMZN.Open", "AMZN.High", "AMZN.Close", "AMZN.Volume", "AMZN.Adjusted")
View(amzn)
str(amzn)
View(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
colnames(amzn) = c("Date",
"AMZN.Open",
"AMZN.High",
"AMZN.Low",
"AMZN.Close",
"AMZN.Volume",
"AMZN.Adjusted")
colnames(amzn) <- c("Date",
"AMZN.Open",
"AMZN.High",
"AMZN.Low",
"AMZN.Close",
"AMZN.Volume",
"AMZN.Adjusted")
colnames(amzn) <- c("Date","Open", "High", "Low","Close","Volume","Adjusted")
colnames(amzn)
sampleTimes
amzn.Dated <- cbind(sampleTimes, amzn)
nrow(sampleTimes)
amzn$row.names
amzn$Date <- rownames(amzn)
View(amzn)
Date <- rownames(amzn)
Date <- rownames(amzn)
Date
Date <- row.names(amzn)
row.names(amzn)
View(amzn)
amzn <- as.data.frame(amzn)
row.names(amzn)
amzn$Date <- row.names(amzn)
View(amzn)
Date <- row.names(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- as.data.frame(amzn)
Date <- row.names(amzn)
amzn <- as.data.frame(amzn, row.names=NULL)
amzn <- as.data.frame(amzn, row.names=NULL)
View(amzn)
amznDate <- cbind(Date, amzn)
View(amznDate)
amzn <- as.matrix(amzn, row.names=NULL)
View(amzn)
amzn <- as.matrix(amzn, row.names=F)
View(amzn)
amzn <- as.data.frame(amzn, row.names=F)
View(amzn)
amznDate <- cbind(Date, amzn)
View(amznDate)
amzn <- cbind(Date, amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- as.data.frame(amzn)
Date <- row.names(amzn)
amzn <- as.data.frame(amzn, row.names=F)
amzn <- cbind(Date, amzn)
View(amzn)
amzn <- as.data.frame(amzn, row.names=F)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- as.matrix(amzn)
Date <- row.names(amzn)
amzn <- as.data.frame(amzn, row.names=F)
amzn <- cbind(Date, amzn)
View(amzn)
?grepl()
year(amzn$Date)
amzn.2012 <- amzn[year(amzn$Date) == 2012]
amzn.2012 <- amzn[year(amzn$Date) == 2012, ]
View(amzn.2012)
amzn.2012 <- as.data.frame(amzn[year(amzn$Date) == 2012, ], row.names=F)
amzn.2012 <- amzn[year(amzn$Date) == 2012, row.names=F]
amzn.2012 <- amzn[year(amzn$Date) == 2012]
amzn.2012 <- amzn[year(amzn$Date) == 2012]
View(amzn)
amzn.2012 <- amzn[year(amzn$Date) == 2012]
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- as.matrix(amzn)
Date <- row.names(amzn)
amzn <- as.data.frame(amzn, row.names=F)
amzn <- cbind(Date, amzn)
amzn.2012 <- amzn[year(amzn$Date) == 2012]
year(amzn$Date) == 2012
amzn.2012 <- amzn[year(amzn$Date) == 2012,]
amzn.2012 <- as.data.frame(as.matrix(amzn.2012))
amzn.2012 <- as.data.frame(as.matrix(amzn.2012), row.names=F)
View(amzn.2012)
amzn.2012 <- amzn[year(amzn$Date) == 2012,]
amzn.2012 <- as.data.frame(amzn.2012, row.names=F)
amzn.2012 <- as.data.frame(as.matrix(amzn.2012), row.names=F)
View(amzn.2012)
weekday(2012-01-03)
weekdays(2012-01-03)
amzn.Mon2012 <- amzn.2012[weekdays(amzn.2012$Date) == Mon]
amzn.Mon2012 <- amzn.2012[weekdays(amzn.2012$Date) == "Mon"]
amzn.Mon2012 <- amzn.2012[weekdays(amzn.2012$Date) == Mon,]
amzn.Mon2012 <- amzn.2012[weekdays(amzn.2012$Date) == "Mon",]
weekdays(amzn.2012$Date)
amzn.Mon2012 <- amzn[year(amzn$Date) == 2012 & weekdays(amzn$Date) == "Mon",]
amzn.Mon2012 <- amzn[year(amzn$Date) == 2012 & weekdays(amzn$Date) == Mon,]
weekdays(amzn.2012$Date)
weekdays(2012-01-03)
x <- weekdays(2012-01-03)
amzn.Mon2012 <- amzn[year(amzn$Date) == 2012 & as.string(weekdays(amzn$Date)) == Mon,]
amzn.Mon2012 <- amzn[year(amzn$Date) == 2012 & as.charactor(weekdays(amzn$Date)) == Mon,]
weekdays(amzn$Date)
View(amzn.2012)
amzn.2012$Date
weekdays(amzn.2012$Date)
attach(amzn.2012)
weekdays(Date)
detach(amzn.2012)
install.packages("lubridate")
library(lubridate)
wday(2012-01-10)
week(2012-01-10)
week(2012-01-10)
yday(2012-01-10)
as.date(2012-01-10)
date(2012-01-10)
weekdays(2012-01-10, 2012-01-16)
temp <- apply(amzn.2012$Date, 2, weekdays)
temp <- apply(amzn.2012$Date, 1, weekdays)
amzn.2012$weekDay <- weekdays(as.Date(mzn.2012$Date))
amzn.2012$weekDay <- weekdays(as.Date(amzn.2012$Date))
View(amzn.2012)
WeekDay <- weekdays(as.Date(amzn.2012$Date))
WeekDay <- weekdays(as.Date(Date))
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- as.matrix(amzn)
Date <- row.names(amzn)
WeekDay <- weekdays(as.Date(Date))
amzn <- as.data.frame(amzn, row.names=F)
amzn <- cbind(Date, WeekDay amzn)
amzn <- cbind(Date, WeekDay, amzn)
View(amzn)
amzn.2012 <- amzn[year(amzn$Date) == 2012,]
amzn.2012 <- as.data.frame(as.matrix(amzn.2012), row.names=F)
View(amzn.2012)
amzn.Mon2012 <- amzn.2012[amzn.2012$WeekDay == "Monday"]
amzn.2012$WeekDay
x <- amzn.2012$WeekDay
x
x <- as.data,frame(amzn.2012$WeekDay)
x <- as.data.frame(amzn.2012$WeekDay)
View(x)
x <- as.data.frame(amzn.2012$WeekDay, row.names = F)
x <- as.data.frame(amzn.2012$WeekDay, row.names=F)
x <- as.vector(amzn.2012$WeekDay)
amzn.Mon2012 <- amzn.2012[amzn.2012$WeekDay == Monday]
amzn.Mon2012 <- amzn.2012[amzn.2012$WeekDay == "Monday"]
?as.data.frame()
amzn.2012 <- as.data.frame(as.matrix(amzn.2012), row.names=NULL)
View(amzn.2012)
amzn.Mon2012 <- amzn.2012[amzn.2012$WeekDay == "Monday"]
amzn.Mon2012 <- amzn.2012[amzn.2012$WeekDay == "Monday",]
View(amzn.Mon2012)
x <- c(nrow(amzn.2012), nrow(amzn.Mon2012))
x
