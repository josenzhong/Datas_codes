ls
end
undebug(ls)
q
undebug(ls)
debugonce()
ls
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
?with()
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$Sepal.Length(specise == virginica))
mean(iris$Sepal.Length, specise == virginica)
View(iris)
mean(subset(iris, Species == virginica) [, "Sepal.Length"])
mean(subset(iris, Species == "virginica") [, "Sepal.Length"])
pwd
# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv<- function(invm = matrix()) inv <<- invm
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv<- function(invm = matrix()) inv <<- invm
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
> inv <- cacheSolve(x)
getting cached data
> inv
inv <- cacheSolve(x)
inv <- cacheSolve(x)
inv
}
makeCacheMatrix <- function(x = matrix()) {
# inverse set to NULL by default
i <- NULL
# function to set x
set <- function(y){
x <<- y
i <<- NULL
}
# function to get x
get <- function() x
# function to set inverse
setinverse <- function(inverse = matrix()) i <<- inverse
# function to get inverse
getinverse <- function() i
# return a list
list(set=set, get=get,setinverse=setinverse, getinverse=getinverse)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting chcaed inverse")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
## If not found the inverse in the cache, then computes it and save in the cache
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set,
get=get,
getinv=getinv,
setinv=setinv)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set,
get=get,
getinv=getinv,
setinv=setinv)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinv(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
mv ~/.rstudio-desktop ~/rstudio-desktop.old
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
setwd("~/github/Datas_codes/3_GETDATA/Quiz/Week 3 Quiz")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file(fileUrl, destfile="./microdata_2006.csv", method="curl")
microdata <- read.csv("./microdata_2006.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./microdata_2006.csv", method="curl")
microdata <- read.csv("./microdata_2006.csv")
View(microdata)
microdata[which(microdata$ACR == 3 & microdata$AGS == 6)]
microdata <- as.data.frame(microdata)
microdata[which(microdata$ACR == 3 & microdata$AGS == 6)]
microdata <- as.data.frame(microdata)
attach(microdata)
microdata[which(ACR == 3 & AGS == 6)]
detach(microdata)
X <- microdata[which(ACR == 3)]
X <- microdata[which(microdata$ACR == 3)]
X <- microdata[which(microdata$ACR = 3)]
str(microdata)
which(microdata$ACR = 3 & microdata$AGS = 3)
which(microdata$ACR == 3 & microdata$AGS == 3)
microdata <- read.csv("./microdata_2006.csv")
which(microdata$ACR == 3 & microdata$AGS == 3)
microdata[which(microdata$ACR == 3 & microdata$AGS == 3),]
microdata.f <- microdata[which(microdata$ACR == 3 & microdata$AGS == 3),]
View(microdata.f)
microdata.f <- microdata[which(microdata$ACR == 3 & microdata$AGS == 6),]
View(microdata.f)
agricultureLogical <- which(microdata$ACR == 3 & microdata$AGS == 6)
which(agricultureLogical)
microdata[which(agricultureLogical),]
which(microdata$ACR == 3 & microdata$AGS == 6)
agricultureLogical <- microdata$ACR == 3 & microdata$AGS == 6
which(agricultureLogical)
install.packages("jpeg")
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
readJPEG(fileUrl, native = TRUE)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
readJPEG(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg, native = TRUE)
readJPEG("getdata-jeff.jpg", native = TRUE)
x <- readJPEG("getdata-jeff.jpg", native = TRUE)
quantile(x, c(.30, .80))
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
downlaod.file(fileUrl1, destfile="./gdp.csv", method="curl")
downlaod.file(fileUrl2, destfile="./edu.csv", method="curl")
gdpData <- read.csv("./gdp.csv")
eduData <- read.csv("./edu.csv")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="./gdp.csv", method="curl")
download.file(fileUrl2, destfile="./edu.csv", method="curl")
gdpData <- read.csv("./gdp.csv")
eduData <- read.csv("./edu.csv")
View(eduData)
View(gdpData)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="./gdp.csv", method="curl")
download.file(fileUrl2, destfile="./edu.csv", method="curl")
gdpData <- read.csv("./gdp.csv")
eduData <- read.csv("./edu.csv", skip = 4, nrow = 190)
colnames(eduData) <- c("CountryCode", "Ranking")
View(eduData)
View(gdpData)
eduData <- read.csv("./edu.csv", skip = 4, nrow = 190)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="./gdp.csv", method="curl")
download.file(fileUrl2, destfile="./edu.csv", method="curl")
gdpData <- read.csv("./gdp.csv")
all_content = readLines("./edu.csv")
eduData = all_content[5:190]
eduData <- read.csv("./edu.csv", skip = 4, nrow = 190)
View(eduData)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="./gdp.csv", method="curl")
download.file(fileUrl2, destfile="./edu.csv", method="curl")
all_content = readLines("./gdp.csv")
gdpData = all_content[5:190]
eduData <- read.csv("./edu.csv")
gdpData = as.data.frame(all_content[5:190])
View(gdpData)
gdpData = read.csv(textConnection(all_content[5:190]))
View(gdpData)
gdpData = read.csv(textConnection(all_content[5:195]))
View(gdpData)
temp = read.csv(textConnection(all_content[5:195]))
gdpData <- cbind(temp[1, 2, 4, 5])
gdpData <- cbind(temp$X, temp$X.1, temp$X.3, temp$X.4)
View(gdpData)
View(temp)
gdpData <- cbind(as.character(temp$X), temp$X.1, as.character(temp$X.3), temp$X.4)
View(gdpData)
gdpData <- cbind(as.character(temp$X),
as.numeric(temp$X.1),
as.character(temp$X.3),
as.character(temp$X.4))
str(temp)
gdpData <- cbind(as.factor(temp$X),
as.numeric(temp$X.1),
as.factor(temp$X.3),
as.factor(temp$X.4))
View(gdpData)
temp = as.data.frame(read.csv(textConnection(all_content[5:195])))
gdpData <- cbind(as.factor(temp$X),
as.numeric(temp$X.1),
as.factor(temp$X.3),
as.factor(temp$X.4))
gdpData <- as.data.frame(cbind(temp$X, temp$X.1, temp$X.3, temp$X.4))
View(gdpData)
gdpData <- temp(X, X.1, X.3, X.4)
gdpData <- temp[X, X.1, X.3, X.4]
gdpData <- temp["X", "X.1", "X.3", "X.4"]
str(temp)
gdpData <- temp["X", "X.1", "X.3", "X.4"]
gdpData <- temp["X", "X.1", "X.3"]
gdpData <- temp[1, 2, 4, 5]
temp[1, 2, 4, 5]
gdpData <- temp[c(1, 2, 4, 5)]
temp = as.data.frame(read.csv(textConnection(all_content[5:195])))
View(temp)
gdpData <- temp[c(1, 2, 4, 5)]
str(gdpData)
gdpData[,1]
View(eduData)
View(gdpData)
View(eduData)
View(gdpData)
temp =read.csv(textConnection(all_content[5:195]))
gdpData <- temp[c(1, 2, 4, 5)]
View(gdpData)
colnames(gdpData) <- c("CountryCode", "Ranking", "Long.Name", "GDP$M")
View(gdpData)
rm(temp)
rm(temp, all_content)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="./gdp.csv", method="curl")
download.file(fileUrl2, destfile="./edu.csv", method="curl")
all_content = readLines("./gdp.csv")
temp =read.csv(textConnection(all_content[5:195]))
gdpData <- temp[c(1, 2, 4, 5)]
colnames(gdpData) <- c("CountryCode", "Ranking", "Long.Name", "GDP$M")
rm(temp, all_content)
eduData <- read.csv("./edu.csv")
View(eduData)
mergedData = merge(eduData, gdpData, by.x = "CountryCode", by.y = "CountryCode", all=T)
View(mergedData)
View(gdpData)
View(eduData)
edushort <- eduData["CountryCode", "Income.Group"]
mergedData = merge(edushort, gdpData, by.x = "CountryCode", by.y = "CountryCode", )
edushort <- as.data.frame(eduData["CountryCode", "Income.Group"])
mergedData = merge(edushort, gdpData, by.x = "CountryCode", by.y = "CountryCode", )
View(edushort)
edushort <- eduData["CountryCode", "Income.Group"]
edushort <- eduData[c(1,3)]
View(edushort)
mergedData = merge(edushort, gdpData, by.x = "CountryCode", by.y = "CountryCode", )
View(mergedData)
ave(mergedData$Ranking[mergedData$Income.Group == "High income: OECD"])
ave(mergedData$Ranking[mergedData$Income.Group == "High income: nonOECD"])
mergedData$Ranking[mergedData$Income.Group == "High income: OECD"]
mean(mergedData$Ranking[mergedData$Income.Group == "High income: OECD"])
mean(mergedData$Ranking[mergedData$Income.Group == "High income: nonOECD"])
quantile(mergedData, prob = (.20, .40, .60, .80, .100))
quantile(mergedData$Ranking, prob = (.20, .40, .60, .80, .100))
quantile(mergedData$Ranking, prob = (.20, .40, .60, .80))
quantile(mergedData$Ranking, c(.20, .40, .60, .80, 1))
mergedData <- mergedData[order(mergedData$Ranking)]
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
mergedData <- mergedData[order(mergedData$Ranking),]
View(mergedData)
quantiles <- as.data.frame(190, 1)
quantiles <- as.data.frame(nrow = 190, ncol = 1)
quantiles <- NA
quantiles <- as.data.frame(NA)
colnames(quantiles) <- c("Quantiles")
View(quantiles)
mergedData <- cbind(mergedData, quantiles)
View(mergedData)
if(mergedData$Ranking <= 38) {mergedData$Quantiles <- 1}
else if(mergedData$Ranking %in% 39:76) {mergedData$Quantiles <- 2}
else if(mergedData$Ranking %in% 77:114) {mergedData$Quantiles <- 3}
else if(mergedData$Ranking %in% 115:152) {mergedData$Quantiles <- 4}
else {mergedData$Quantiles <- 5}
View(mergedData)
mergedData <- cbind(mergedData, quantiles)
View(mergedData)
edushort <- eduData[c(1,3)]
mergedData = merge(edushort, gdpData, by.x = "CountryCode", by.y = "CountryCode", )
mean(mergedData$Ranking[mergedData$Income.Group == "High income: OECD"])
mean(mergedData$Ranking[mergedData$Income.Group == "High income: nonOECD"])
View(mergedData)
mergedData <- mergedData[order(mergedData$Ranking),]
quantiles <- as.data.frame(NA)
colnames(quantiles) <- c("Quantiles")
mergedData <- cbind(mergedData, quantiles)
mergedData$Quantiles[mergedData$Ranking <= 38] <- 1
View(mergedData)
mergedData$Quantiles[mergedData$Ranking %in% 39:76] <- 2
View(mergedData)
mergedData$Quantiles[mergedData$Ranking <= 38] <- 1
mergedData$Quantiles[mergedData$Ranking %in% 39:76] <- 2
mergedData$Quantiles[mergedData$Ranking %in% 77:114] <- 3
mergedData$Quantiles[mergedData$Ranking %in% 115:152] <- 4
mergedData$Quantiles[mergedData$Ranking %in% 153:190] <- 5
View(mergedData)
mergedData.f <- mergedData[(mergedData$Income.Group == "Lower middle income"
& mergedData$Quantiles == 1),]
View(mergedData.f)
nrow(mergedData.f)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="./gdp.csv", method="curl")
download.file(fileUrl2, destfile="./edu.csv", method="curl")
# Quiz 3
all_content = readLines("./gdp.csv")
temp =read.csv(textConnection(all_content[5:195]))
gdpData <- temp[c(1, 2, 4, 5)]
colnames(gdpData) <- c("CountryCode", "Ranking", "Long.Name", "GDP$M")
rm(temp, all_content)
eduData <- read.csv("./edu.csv")
View(gdpData)
gdpData[order(gdpData$Ranking, decreasing = T)]
gdpData[order(gdpData$Ranking, decreasing = T)]
View(gdpData)
gdpData[order(gdpData$Ranking)]
gdpData.dec <- gdpData[order(gdpData$Ranking, decreasing = T)]
str(gdpData)
gdpData.dec <- gdpData[order(Ranking, decreasing = T)]
gdpData.dec <- gdpData[order(gdpData$Ranking, decreasing = T)]
gdpData$Ranking
gdpData.dec <- gdpData[order(gdpData$Ranking)]
gdpData <- as.data.frame(gdpData)
gdpData.dec <- gdpData[order(gdpData$Ranking)]
attach(gdpData)
gdpData.dec <- gdpData[order(Ranking, decreasing=T)]
detach(gdpData)
attach(gdpData)
ranking
Ranking
gdpData.dec <- gdpData[order(gdpData$Ranking, decreasing=T),]
View(gdpData.dec)
gdpData.dec[13, "Long.Name"]
View(eduData)
