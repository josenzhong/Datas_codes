m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}m
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
}m
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
}m
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
list()
?list()
matrix(c(-1,-2,1,1), 2, 2)
m <- matrix(c(-1,-2,1,1), 2, 2)
solve(m)
setsolve <- function(solve) m <<- solve
setsolve(m)
setsolve <- solve(m)
setsolve <- function(solve) m <<- solve
a <- setsolve(m)
View(a)
View(a)
View(m)
View(m)
setmean <- function(mean)
m <<- mean
setmean(m)
a <- setmean(m)
a <- c(1,2,3,6,58,99,79,200)
setmean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
}m
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a, c(1,2,3), mean)
rm(a)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
a = mean(subset(mtcars, cyl == 4) [hp, ])
a = mean(subset(mtcars, cyl == 4) ["hp", ])
a = mean(subset(mtcars, cyl == 4) [hp, ], na.rm = T)
a = mean(subset(mtcars, cyl == 4) ["hp", ], na.rm = T)
subset(mtcars, cyl == 4) ["hp", ]
subset(mtcars, cyl == 4) [ , "hp"]
a = mean(subset(mtcars, cyl == 4) [, "hp"], na.rm = T)
b = mean(subset(mtcars, cyl == 8) [, "hp"], na.rm = T)
abs(a - b)
debug(ls)
ls
ls
end
undebug(ls)
q
undebug(ls)
debugonce()
ls
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
?with()
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$Sepal.Length(specise == virginica))
mean(iris$Sepal.Length, specise == virginica)
View(iris)
mean(subset(iris, Species == virginica) [, "Sepal.Length"])
mean(subset(iris, Species == "virginica") [, "Sepal.Length"])
pwd
# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv<- function(invm = matrix()) inv <<- invm
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv<- function(invm = matrix()) inv <<- invm
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
> inv <- cacheSolve(x)
getting cached data
> inv
inv <- cacheSolve(x)
inv <- cacheSolve(x)
inv
}
makeCacheMatrix <- function(x = matrix()) {
# inverse set to NULL by default
i <- NULL
# function to set x
set <- function(y){
x <<- y
i <<- NULL
}
# function to get x
get <- function() x
# function to set inverse
setinverse <- function(inverse = matrix()) i <<- inverse
# function to get inverse
getinverse <- function() i
# return a list
list(set=set, get=get,setinverse=setinverse, getinverse=getinverse)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting chcaed inverse")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
## If not found the inverse in the cache, then computes it and save in the cache
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set,
get=get,
getinv=getinv,
setinv=setinv)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set,
get=get,
getinv=getinv,
setinv=setinv)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinv(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
mv ~/.rstudio-desktop ~/rstudio-desktop.old
setwd("~/github/Datas_codes/3_GETDATA/Course Project")
if(!file.exist("./data")) {dir.create("./data")}
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp <- tempfile()
download.file(fileUrl, temp)
unzip(temp, files = NULL, list = FALSE, overwrite = TRUE,
junkpaths = FALSE, exdir = "./data", unzip = "internal",
setTimes = FALSE)
if(!file.exists("./data")) {dir.create("./data")}
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp <- tempfile()
download.file(fileUrl, temp)
unzip(temp, files = NULL, list = FALSE, overwrite = TRUE,
junkpaths = FALSE, exdir = "./data", unzip = "internal",
setTimes = FALSE)
unlink(temp)
if(!file.exists("./data")) {dir.create("./data")}
unzip("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",
files = NULL, list = FALSE, overwrite = TRUE,
junkpaths = FALSE, exdir = "./data", unzip = "internal",
setTimes = FALSE)
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile="./data")
if(!file.exists("./data")) {dir.create("./data")}
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",
temp)
zip.file.extract(temp, zipname = "UCI_HAR_Dataset.zip", unzip = getOption("unzip"))
unlink(temp)
if(!file.exists("./data")) {dir.create("./data")}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",
destfile="./data/UCI_HAR_Dataset.zip")
unzip("./data/UCI_HAR_Dataset.zip")
if(!file.exists("./data")) {dir.create("./data")}
download.file("archive.ics.uci.edu/ml/machine-learning-databases/00240/UCI%20HAR%20Dataset.zip",
destfile="./data/UCI_HAR_Dataset.zip")
unzip("./data/UCI_HAR_Dataset.zip")
temp <- tempfile()
download.file("http://api.worldbank.org/v2/en/country/gbr?downloadformat=csv",temp)
con <- unz(temp, "gbr_Country_en_csv_v2.csv")
dat <- read.table(con, header=T, skip=2)
unlink(temp)
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# Load: activity labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_test = X_test[,extract_features]
# Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Bind data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Load and process X_train & y_train data.
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
# Load activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Bind data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merge test and train data
data = rbind(test_data, train_data)
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data      = melt(data, id = id_labels, measure.vars = data_labels)
# Apply mean function to dataset using dcast function
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt")
View(test_data)
activity_labels
features
View(X_test)
View(X_test)
View(y_test)
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
extract_features <- grepl("mean|std", features)
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
View(y_test)
View(X_test)
names(X_test) = features
View(X_test)
X_test = X_test[,extract_features]
View(X_test)
y_test[,2] = activity_labels[y_test[,1]]
View(y_test)
names(y_test) = c("Activity_ID", "Activity_Label")
View(y_test)
names(subject_test) = "subject"
View(subject_test)
View(subject_test)
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
View(test_data)
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
View(train_data)
data = rbind(test_data, train_data)
View(data)
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data   = melt(data, id = id_labels, measure.vars = data_labels)
View(melt_data)
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
View(train_data)
View(tidy_data)
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt", row.names = FALSE)
x <- read.table("./tidy_data.txt")
View(x)
